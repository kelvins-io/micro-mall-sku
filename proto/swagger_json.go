package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_sku_proto_sku_business_sku_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x8f\xdb\x44\x14\xbf\xe7\xaf\xb0\x0c\x47\xd4\x94\x82\x38\xf4\x66\xb2\xa6\x8d\xda\x6e\x56\x71\x22\x40\xa8\xb2\x26\xf6\x73\x76\x1a\x7b\xc6\x9d\x8f\x2d\x01\xad\x44\x0f\xe5\x4b\x2a\x3d\x54\xa5\x9c\x2a\x95\x0f\xc1\x05\x04\x17\x40\xfd\x7b\xc8\xaa\xfc\x17\x68\x1c\x27\xf1\xf7\x26\x4e\xba\x9b\x88\xb5\xb4\xd2\x66\x3c\xef\xcd\xfb\xfa\xbd\xf7\xe6\x25\x9f\x36\x34\x4d\xe7\xf7\xd0\x70\x08\x4c\xbf\xaa\xe9\x57\x2e\x5d\xd6\xdf\x50\x6b\x98\x78\x54\xbf\xaa\xa9\xf7\x9a\xa6\x0b\x2c\x7c\x50\xef\x43\x46\x05\x6d\x06\xd8\x61\xd4\x0e\x90\xef\xdb\x7c\x24\xed\xe9\xa2\xfa\x6f\x20\x39\x26\xc0\xb9\xfa\x70\x29\x5a\x8e\xb8\x69\x9a\x7e\x04\x8c\x63\x4a\x14\x8f\xf8\x5f\x8d\x50\xa1\x71\x10\x7a\x43\xd3\x8e\xa3\x33\x1d\x4a\xb8\x0c\x80\xeb\x57\xb5\x8f\xa6\x54\x28\x0c\x7d\xec\x20\x81\x29\x69\xde\xe1\x94\xa8\xbd\xb7\xa3\xbd\x21\xa3\xae\x74\x96\xdc\x8b\xc4\x21\x5f\x28\xd3\x3c\x7a\x53\xc9\xd7\xc4\xe4\x08\x88\xa0\x6c\xdc\x74\xc1\x95\x8e\x98\xef\x50\x24\x32\xf9\x51\xd9\x48\x06\x01\x62\x63\x25\xff\xc9\x57\x3f\x4c\xbe\x78\x34\x79\xf1\x78\xf2\xeb\x77\xb1\x7a\xd1\x16\x1a\x02\x8b\x8e\x6f\xbb\x6a\x9b\x35\x92\xef\xc6\xe6\xb0\x80\x1d\x61\x07\xec\xbd\xe8\x9c\xf6\xec\xdc\x24\x31\x03\x1e\x52\xc2\x81\xa7\x8e\xd5\x34\xfd\xca\xe5\xcb\x99\x25\x4d\xd3\x5d\xe0\x0e\xc3\xa1\x88\x2d\x6a\x68\x5c\x3a\x0e\x70\xee\x49\x5f\x9b\x71\xba\x94\x60\x3f\x55\xc1\x39\x84\x00\xe5\x98\x69\x9a\xfe\x3a\x03\x4f\xf1\x79\xad\xe9\x82\x87\x09\x56\x7c\x79\xca\xa1\x19\xc9\xbb\xf1\x19\x7a\x8a\xd3\x71\xe2\xd3\x71\xf2\x70\xdd\x05\x0f\x49\x5f\x9c\xae\x08\xd1\x24\x81\x8f\x43\x70\x04\xb8\x1a\x30\x46\xd9\x5c\x9f\x75\xd5\x61\x92\x08\x1c\x80\xa9\x98\x56\xc8\xdd\x28\xd0\x40\x0f\x11\x43\x01\x08\x60\x8b\x78\x9b\x3e\x19\x75\x08\x0a\x22\x98\x0c\xa8\x3b\xce\xca\x8b\x49\xd9\x1b\x06\x77\x25\x66\xa0\xa2\x46\x30\x09\xaf\xd2\x6d\x77\x25\x70\xb1\x8c\xf6\xb7\x13\xda\x0b\x34\xcc\xea\x5d\x10\xdd\x0b\xae\xb7\x1b\x49\x6e\xb1\x1d\x0b\x60\xe7\x63\x9e\x02\xdd\x10\xca\x41\xf7\xf2\x9b\xbf\x26\x8f\xbe\x9d\xbc\x78\xfa\xef\xe3\x17\x7c\x24\x27\x5f\x3e\x7d\xf9\xfc\x97\xd5\xd0\x77\x0d\x84\x35\x92\x37\xd5\xa1\xbb\x03\xbc\x85\xd0\x17\x98\x8b\x9f\x12\xcc\xf1\x43\x1a\xda\xd8\x2d\x86\xdd\x5d\x09\xac\x0a\x77\x1e\xf2\x79\x16\x78\x62\x1c\x4e\x19\x0b\x86\xc9\x30\x4b\xec\x51\x16\x20\x65\x5d\x1d\x13\xf1\xce\xdb\xfa\xb9\xa1\x28\x94\xc2\x46\xf7\xd0\x38\x55\xbe\x28\x2f\x87\xd2\x3f\x7f\x7f\x7d\xf2\xec\xcf\xc9\x93\xcf\x27\x8f\xef\xaf\x86\xa0\x03\x29\x8c\x7b\x68\x6c\x8d\xe4\x0e\x21\x68\x21\xf4\x05\x82\xe2\x67\xcb\xab\x56\xd2\x63\x5b\x55\xb0\x18\x70\x41\x19\x2c\xdd\x28\xde\xff\x7e\xf2\xe3\xc3\x3a\x8d\x62\x77\x7a\xd0\x2e\x76\x8a\x59\xd1\x2f\x40\x17\x3f\x5b\x0e\xba\xbc\xdf\xb6\x00\x7a\x21\x53\x58\x11\xe3\x26\x97\x61\xe8\x43\x00\x64\xe9\x5b\xda\xcb\xe7\x3f\x4d\x1e\x3c\x50\xad\x62\x54\xe8\x26\x7f\x3c\x3b\xf9\xec\xe7\xd5\x50\x68\xcd\x0f\xb5\x46\xf2\x20\x16\x65\x87\xa0\x58\x28\xff\x05\x1e\xe3\x67\xcb\xf1\x58\xe2\xbc\xf3\x00\xe5\x7c\x40\x93\x90\x75\x31\x4e\x89\xc6\x3c\x03\xe9\x19\x24\xd5\x82\xce\xba\x67\x3a\xb8\x03\xce\xe2\xc6\xa5\xc7\x90\xc6\x19\xd0\x44\xfb\x6d\xc9\xfc\x2c\x94\x32\x5d\x78\xa1\x8f\x8f\x90\x2f\xe1\x14\xc2\x54\x50\x2f\x9a\xf7\xc1\x58\x24\x14\x3f\x2e\xcc\x46\xa9\xf0\x5b\x43\x45\xc8\x30\x58\x5a\x3f\x87\xba\xa5\xea\x61\x22\x60\x08\xac\x4c\x3f\x4c\xc4\x5b\x57\x8a\xb9\x06\xc0\x39\x1a\x9e\x66\xb7\x42\x52\x17\x04\xc2\x7e\x2e\xed\xcd\x48\x11\x63\x28\x0d\x15\x1d\x0b\x08\xb2\xfb\x4b\x71\x90\x0c\xa9\x62\x80\x17\xfa\x29\x09\x9f\x16\x0d\x02\x4a\xe6\xc9\x6e\x0d\xaf\x15\x19\x7f\x99\x72\x2a\x5a\x8a\xb0\xd8\xf2\x7c\xb8\xb4\xd5\x4f\xd5\xb4\x64\xc6\xb3\x86\xc6\x99\xb9\xcc\x46\x5d\x9b\x94\x7c\x2e\xb3\x49\x04\x1b\x5b\x87\x34\x2c\xf1\x76\xb2\x6a\x4b\x61\x0b\x86\x5c\xb0\x09\xad\x13\xb9\xf3\xaa\x6f\x07\x20\xb2\xa9\x79\x09\x99\x3b\x33\xfa\x5b\x8a\x7c\x1d\x37\x6d\x22\x32\x55\x8c\xaf\xae\x43\x06\x1b\x85\x76\xc2\xdc\x8e\xdb\x93\x32\x2b\x0f\x28\xf5\x01\x91\xd2\xc4\x1a\xbf\x5e\xc1\x44\x05\xb3\xae\x1d\x88\x62\x6b\x24\xe7\x5e\x6d\x13\x8f\xd6\xcd\x58\x69\x34\xec\x45\x19\x76\x1d\xfd\x15\xef\xaa\xc2\x51\x85\x12\x14\x50\x49\x4a\xad\x57\x5d\x51\x33\xe3\xb0\x55\x15\x8f\xd2\xc0\x3a\x6a\xc7\x63\xc0\x8d\xc8\x9e\x2b\x79\x67\x9f\x16\xe3\x40\xa8\x19\x54\xe9\x74\xb5\x86\x59\x69\x68\xcb\x57\x60\x55\xe5\xab\x70\x73\xb5\x70\xae\x6e\x6f\xca\x22\xa7\x6e\x46\x50\x1d\x88\x0c\x52\x9d\xb1\xde\xea\x9a\x46\xcf\x4c\xde\xf2\xfa\x07\x7b\x99\x95\x3d\xf3\xa6\x99\x5e\x31\xfa\x7b\xed\x5e\x72\xe1\xa0\xdf\xb3\x8d\xf7\x8d\x0f\x67\xd2\xcf\xdb\xf1\xc4\x85\x6a\x76\x56\xa9\x3a\xf9\x41\xd8\x7a\xf9\x60\xf5\x52\x51\x9e\xdc\x8a\x8b\xaa\x48\xdb\x7d\xc9\x53\xd2\x6e\xdb\xae\xba\x5d\x30\x3e\xde\xa6\x92\x7d\xaa\xfc\x65\x73\x9d\x1d\xa8\xac\xff\xab\xfe\xb0\x74\x6e\xba\x4d\xd1\x76\xce\x0d\xe2\xec\x52\x55\x2b\xb1\x5b\xfd\x56\xcb\xb4\xac\x64\x92\x36\xbb\xdd\x4e\x37\x95\xea\x2d\xb3\x6b\xef\x77\x7a\xb6\xf9\x41\xdb\xea\xe5\xde\xe4\x56\x6f\x99\xdd\xd6\x75\x63\xbf\x57\x4c\x33\x7f\x9b\x7b\x63\x5d\xef\x1c\x14\xd3\x44\x6f\xf2\xab\x37\xfa\x25\xdb\x6f\xf4\x8b\x17\x8d\x5b\x9d\xfe\x4c\xae\xfd\x4e\xff\xda\xf5\xe4\x86\x5e\xd7\xd8\xb7\x8c\x56\xaf\xdd\xd9\xb7\xdf\x33\xda\x37\xcd\xbd\xca\x32\x35\xb3\x5c\xa9\x5f\x72\x55\xe2\x9c\xda\xd6\x78\x86\xb7\x32\x5d\xc8\xb0\x53\x8b\x70\xf6\xbb\xa8\x95\x09\xb9\x1c\xd8\xb5\x89\x5d\xe0\x4e\x3d\x35\xa9\xba\x83\xe2\x7c\x4a\x58\x4e\xe4\x30\xf4\x31\xd4\x1b\x60\x21\x01\x43\xca\xc6\x9b\x1f\x62\x39\xd4\xaf\x3b\x53\xf3\x29\xab\x8c\xb4\xfa\x42\xf1\x10\x1c\xec\xc5\x3f\x46\xab\xeb\x61\xdb\xc7\x64\x54\xcb\x51\x02\x89\x57\xa0\xd4\x26\xef\x84\x49\x69\x37\x79\x5f\x6b\x64\xf8\x2f\x7e\xb8\x18\x7f\x0b\x14\x7d\x17\x7b\xf2\xe4\xf7\x93\x87\xbf\x55\xa4\xb3\xaa\xd1\xfb\x16\x5e\x4d\xd7\x49\x99\x1c\x7f\x52\x8f\xee\x10\xe5\x3b\xfd\xd5\x92\x90\xed\xa8\x80\x2a\x4f\x0a\x4b\x72\x71\x2b\xa2\xbd\x5a\x03\xf0\x3d\xdb\xc7\xde\x99\x96\x9a\x6d\xed\x4f\xcf\xe0\x36\x77\x6a\x7b\x57\xfd\x7d\xe5\x36\xf5\xc1\x69\x55\x1a\xea\xef\xb8\xf1\x5f\x00\x00\x00\xff\xff\x65\xe6\x39\xcd\x4c\x2d\x00\x00")

func proto_micro_mall_sku_proto_sku_business_sku_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
		"proto/micro_mall_sku_proto/sku_business/sku.swagger.json",
	)
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4f\x6f\x23\x35\x14\xbf\xe7\x53\x58\x86\x63\xd5\x94\x82\x38\xf4\x16\xa5\x11\x54\xa2\x5b\x94\xa4\x12\x12\xaa\x46\xee\xcc\x4b\xe2\xd5\x8c\x3d\xb5\xdf\x94\x46\xa8\x87\x95\x00\xed\x09\x0e\x5b\x16\x21\xd0\x8a\xbd\x71\x82\x03\x42\x45\xcb\x61\xbf\x0c\xc9\x96\x6f\x81\x3c\x7f\x92\x99\xc9\x24\x9d\xfc\xeb\x26\xa2\x52\xab\xd4\xf6\x7b\x7e\xbf\x9f\x7f\x7e\xcf\x2f\x5f\x56\x08\xa1\xfa\x0b\xd6\xed\x82\xa2\x07\x84\xee\xef\xee\xd1\x1d\x33\xc6\x45\x47\xd2\x03\x62\xe6\x09\xa1\xc8\xd1\x05\x33\xef\x2b\x89\xb2\xea\x71\x5b\x49\xcb\x63\xae\x6b\x05\x1a\x94\xb6\xa2\xe1\xf0\x73\xf4\x77\x37\x1c\x09\x5d\x11\x42\x2f\x41\x69\x2e\x85\x71\x10\x7f\x24\x42\x22\xd1\x80\xb4\x42\xc8\x75\xb8\xa1\x2d\x85\x0e\x3c\xd0\xf4\x80\x7c\x1e\x59\x31\xdf\x77\xb9\xcd\x90\x4b\x51\x7d\xac\xa5\x30\x6b\xcf\xc2\xb5\xbe\x92\x4e\x60\x97\x5c\xcb\xb0\xa7\xc7\x48\xaa\x97\xef\x85\x11\x56\x33\x00\x09\xa1\x5d\xc0\xd4\xbf\x86\x95\xc0\xf3\x98\xea\x9b\xa0\xef\xbe\xbd\x1d\x7c\xf7\xfc\xcd\xcd\xaf\xc3\xa7\xb7\xff\xbc\x7e\x39\x7c\xf2\x7b\x8c\x2c\x5c\x28\x7d\x50\xe1\xce\x47\x8e\x59\xfc\x11\xe0\xa9\x06\x75\x64\xfc\xa7\x56\x29\xd0\xbe\x14\x1a\x74\x66\x17\x42\xe8\xfe\xde\x5e\x6e\x88\x10\xea\x80\xb6\x15\xf7\x31\x66\xad\x46\x74\x60\xdb\xa0\x75\x27\x70\x49\xe2\x69\x37\xe5\x3e\x8a\xd8\xee\x81\xc7\x26\x9c\x11\x42\xdf\x55\xd0\x31\x7e\xde\xa9\x3a\xd0\xe1\x82\x1b\xbf\xf1\x49\xa5\xc2\x6d\xc6\x8e\x69\xc6\xfc\xba\x52\xf4\xf9\x3a\x05\xcd\x67\x8a\x79\x80\xa0\xc6\x07\x12\xfd\xe4\x40\x09\xe6\x85\x22\x0a\xb8\x93\x0f\x9d\x87\x30\x2f\x02\x50\xfd\xfc\x94\x82\x8b\x80\x2b\x30\xdc\x76\x98\xab\x21\x37\x8d\x7d\x3f\x74\xaa\x51\x71\xd1\xcd\x1b\x77\xa4\xf2\x98\x39\x58\xca\x05\x7e\xf8\x01\x2d\xc4\x72\x96\xc2\x82\xac\x9b\x47\x41\x0d\x3f\xba\x05\xea\x92\xdb\x29\x6e\xce\x2a\x69\x3f\x31\x1f\x63\x7d\x79\xa0\xec\x1e\x13\xa8\xab\x4c\x6b\x69\x73\x86\x50\xd5\x3d\xe9\xa7\x35\xe7\x07\xd3\x35\x37\xf8\xfe\x9b\xe1\xd3\xdb\xc1\xd7\x7f\xdc\x3d\xb9\x19\xbc\xfa\xe1\xdf\x67\xaf\x66\x68\xee\x38\xd9\xac\x96\xec\xd5\x32\x5b\x6d\x81\xfc\x8a\x23\x7f\x28\x25\x9e\x4b\x67\x42\x6f\x91\x14\x8b\x66\x52\x4a\x44\x15\xe4\x85\xb8\x52\xf8\x17\x01\x68\x2c\x83\xfe\x3e\xed\x8e\x36\x58\x42\xbf\x81\xc3\xb1\xb4\x6c\x7f\x7b\x39\xfc\xe5\xaf\x48\xbc\x3b\x77\xaf\x6f\x06\x3f\xbd\x88\x86\xde\xfc\xfd\x6c\xf8\xe2\xe7\x32\x1a\x3e\x66\x08\x8a\x33\xb7\x16\xee\xbb\x4d\x1a\xce\x44\xfe\xff\xd3\x70\x0e\xfe\x26\x69\xd8\x8b\x43\x9b\xaf\xe2\x47\x32\xbe\xfb\xf3\xab\xe1\xf3\x1f\x67\x57\xfc\x09\x0e\xb6\x41\xb7\x45\x71\x3f\x94\x6a\x93\x03\xb1\xb6\xec\x2d\x50\x42\x8b\x3b\xa3\x3c\x29\xf5\x8a\xde\x94\x5b\x29\xaf\xb7\xa6\xad\xcd\xcb\x88\x6f\x23\x19\x8e\x3a\xab\x54\x78\xe3\x3e\x28\x8c\xb3\x2e\x3d\x4f\x8a\xd1\xb1\xa4\x72\x63\x72\x93\xe4\xf9\x63\xb0\xc7\x45\xd8\x74\x5e\x3e\x28\xe4\x39\xb1\x51\x5b\x3a\x90\x97\xdf\x0c\x82\x9a\x80\x75\x63\x51\x78\xdc\x9e\xee\xe6\x5d\xe5\x2e\x76\x25\x4f\x5b\x36\xff\xdf\x9f\xdc\x96\x42\x6a\x38\x9b\x03\x6b\x8e\xe4\x42\xc8\xb9\x66\x74\x6e\x7d\x85\xcd\x66\x49\x56\x26\xba\xbd\x2d\x27\x63\xd4\x6c\x97\xc1\x3f\xfb\xbd\xbd\x04\x13\xe9\x7a\x36\x5b\xbc\xe9\x04\x33\xbd\x26\xa5\x09\x31\x6d\xe3\x3a\xfc\x72\x6d\x8d\x7a\xd3\x69\xce\xcf\xa5\x74\x81\x89\x69\xde\x93\xe9\x65\xb8\xdf\x24\x19\x96\x88\xbe\xf0\x95\xbb\xa1\xca\x09\x5b\x37\x2b\x58\x83\x67\x43\x39\x08\x5c\x41\xa2\xbe\xa7\x7b\xda\x08\x59\xa4\x2f\x23\xce\xb8\x2d\x5c\x20\x74\x41\xcd\xe0\xf3\xfd\xfd\xd5\xf0\x99\x32\x15\x70\x85\xd6\xfa\x4e\x9a\x6b\x4b\x5e\x86\xdf\x0e\x3f\x58\x82\xc8\x94\xb5\x25\x04\xb0\x0e\x3a\xd6\x79\x5d\x15\x74\xb9\x46\x50\x16\x73\x9c\xa9\x84\xcf\x92\x42\x0f\x98\x8b\x3d\xcb\x66\xca\xb1\xc4\x44\x11\x2d\xe3\x81\x3b\x20\x90\x63\x7f\xf5\x0a\x5f\xd3\xc5\x41\x76\x35\x37\xde\x39\x24\xb8\x82\x04\xbf\xe2\xc7\x5d\x51\x97\x68\xc5\x31\x95\xdd\xe3\x24\x31\x6c\x1b\xbb\x05\x89\xd9\xd0\x04\xbd\xf2\x0b\x3a\x9d\x94\x2c\x8d\x05\x44\xe4\x36\xa2\x20\x02\x2f\xd3\xd0\xd1\x7a\xb3\x51\x6b\x37\xd2\xed\xfc\xe9\xa7\x87\xb9\x91\xc3\xc6\x27\x8d\xec\x48\xed\xf4\xf0\xa8\x9d\x84\x38\xea\x18\x4d\xa7\xc7\x02\x37\x04\x11\xfb\x9d\x8c\x39\x69\xbd\x16\x8a\xb6\x75\x5a\xaf\x37\x5a\xad\x74\x28\x8d\x66\xf3\xa4\x99\x89\xbf\xd5\x68\x5a\x8f\x4e\xda\x56\xe3\xb3\xa3\x56\x7b\x62\x66\x62\xf4\xb8\xd1\xac\x7f\x5c\x7b\xd4\x2e\xb6\x19\xcd\x46\x33\xb3\x20\x27\xc1\x4d\x62\x1e\xb5\x08\x1b\x56\x4b\x98\x6d\xcb\x40\xe0\xfd\x4a\x2d\xb4\x36\xd0\xac\xf8\x3b\x8f\xb9\x8d\x35\x5c\xad\xe3\x11\x13\x08\x54\x7d\xab\xe8\xdb\x80\x32\x41\xf9\x3d\x29\x16\x32\x04\x8f\x71\x77\x21\x1a\xd6\x53\x94\xb8\xb3\x54\x0d\x16\x97\x1c\xa7\xbf\xb8\x16\x7f\xc9\x45\x7e\x17\x3e\x1e\x5b\x0a\x64\x36\x2e\xfc\x3a\x61\xdd\x75\x3c\x9c\x15\x30\x04\x0b\xf9\x62\xf7\x20\xf0\x9d\xb9\xcd\xb3\x05\xa1\x62\x7e\xaf\x2b\xff\x05\x00\x00\xff\xff\x60\x10\x61\xa2\x4a\x21\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_sku_proto/sku_business/sku.swagger.json": proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
	"proto/micro_mall_users_proto/users/users.swagger.json":    proto_micro_mall_users_proto_users_users_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_sku_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"sku_business": &_bintree_t{nil, map[string]*_bintree_t{
				"sku.swagger.json": &_bintree_t{proto_micro_mall_sku_proto_sku_business_sku_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

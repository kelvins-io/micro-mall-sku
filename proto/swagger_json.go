package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_sku_proto_sku_business_sku_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5b\x6f\x23\x35\x14\x7e\xcf\xaf\xb0\x0c\x8f\xa8\x29\x05\xf1\xd0\xb7\x90\x46\xdb\x6a\x77\x9b\x2a\x93\x08\x10\xaa\x46\xee\x8c\x93\x7a\x33\x63\xbb\xbe\xb4\x0a\xa8\x12\x3c\x2c\x37\x09\xf6\xa1\x5a\x96\xa7\x95\x56\x08\xc1\x0b\x08\x5e\x00\xf5\xf7\x90\xaa\xfc\x0b\xe4\xc9\x4c\x32\xf7\x66\xa6\x77\xb6\x52\xa5\x89\xed\x73\xf9\x8e\x3f\x9f\x73\x3c\xf3\x69\x03\x00\x28\x8f\xd0\x68\x84\x05\x5c\x07\x70\x6d\x65\x15\xbe\x65\xc6\x08\x1d\x32\xb8\x0e\xcc\x3c\x00\x50\x11\xe5\x61\x33\xcf\x05\x53\xac\xe9\x13\x47\x30\xdb\x47\x9e\x67\xcb\xb1\xb6\x67\x83\xe6\x69\x4f\x4b\x42\xb1\x94\xe6\xc7\x4a\x30\x1c\x68\x03\x00\x1e\x62\x21\x09\xa3\x46\x47\xf8\x08\x28\x53\x40\x62\x05\x1b\x00\x1c\x07\x36\x1d\x46\xa5\xf6\xb1\x84\xeb\xe0\xe3\x99\x14\xe2\xdc\x23\x0e\x52\x84\xd1\xe6\x13\xc9\xa8\x59\xbb\x1b\xac\xe5\x82\xb9\xda\x59\x72\x2d\x52\xfb\x72\x01\xa6\x79\xf8\xb6\xf1\xaf\x49\xe8\x21\xa6\x8a\x89\x49\xd3\xc5\xae\x76\xd4\x7c\x85\x11\xd1\xf1\x9f\x26\x46\xda\xf7\x91\x98\x18\xff\xcf\xbe\xfe\x71\xfa\xe5\xb3\xe9\xe9\xc9\xf4\xd7\x1f\x42\x78\xc1\x12\xc6\xb1\x08\xcc\x6f\xb9\x66\xd9\x46\xa0\x74\x2b\x32\x12\x5f\x29\xb0\xe4\x8c\x4a\x2c\x13\x36\x00\x80\x6b\xab\xab\xa9\x21\x00\xa0\x8b\xa5\x23\x08\x57\x61\xf8\x5a\x40\x6a\xc7\xc1\x52\x0e\xb5\x07\x22\x4d\x2b\x31\xf5\x33\x7f\x9d\x7d\xec\xa3\x8c\x32\x00\xe0\x9b\x02\x0f\x8d\x9e\x37\x9a\x2e\x1e\x12\x4a\x8c\x5e\x99\xd8\xbd\x94\xe7\xbd\xd0\x06\x4c\x68\x3a\x6e\xe4\x3d\x1f\xc7\x50\x72\x24\x90\x8f\x15\x16\x8b\x4d\x9a\xfd\xa5\xf0\x51\xe4\x07\xdc\xda\x63\xee\x24\x0d\x83\xd0\xa2\x19\x81\x0f\x34\x11\xd8\x84\x5a\x09\x8d\xaf\x13\xfe\x81\xc6\x52\x2d\x83\x7e\x37\x86\x5e\xa1\x51\x1a\x37\xb4\xc6\xfa\xfd\xd0\x88\x85\xc5\x21\x71\x62\x31\xdd\x6d\xc4\xb5\x85\x71\xcc\xe1\xaa\x47\x64\x82\xa9\x23\x5c\xcc\xd4\xf3\xef\xfe\x9a\x3e\xfb\x7e\x7a\xfa\xe2\xdf\x93\x53\x39\xd6\xd3\xaf\x5e\x9c\xbf\xfa\xa5\x84\xb2\x0f\xb0\xb2\xc6\xfa\x91\xb1\x70\x7f\xd8\xba\x70\xfa\xa6\x88\x2a\xf7\x19\xb7\x89\x9b\xcf\xd5\x03\x8d\x45\x19\x59\x87\xc8\x93\x69\xb6\xaa\x09\x9f\x29\x56\x82\xd0\x51\x5a\x78\xc8\x84\x8f\xcc\x26\x43\x42\xd5\x7b\xef\xc2\x5b\xa3\x1e\xd7\xca\x46\x47\x68\x92\x48\x94\x4c\x16\xf3\xef\x9f\xbf\xbf\x39\x7b\xf9\xe7\xf4\xf9\x17\xd3\x93\xcf\x4b\x68\xb7\xa3\x55\xeb\x08\x4d\xac\xb1\xbe\x47\xb4\x5b\x38\xfd\xba\xe5\xc7\x38\xf2\x3b\x90\x1a\xb9\x30\x74\x52\x93\xa6\xd4\x9c\x7b\xd8\xc7\x74\xe9\x4a\x7e\xfe\xea\xa7\xe9\xd3\xa7\x26\x33\x06\x14\x9d\xfe\xf1\xf2\xec\xb3\x9f\x4b\x88\x6a\xcd\x2d\x58\x63\xbd\x13\xda\xbd\x47\x9c\xcd\xf5\xff\x75\xa3\x6f\x41\x10\x6e\x83\xc9\xf3\xce\x37\xe6\xeb\xa2\x4f\x8d\x3b\xdd\x66\xbe\xcf\xe8\x7c\xab\x62\xfc\x8e\x6a\x07\xdb\x7b\x82\x9d\x45\xdd\x86\xe1\xb1\x20\x29\x2e\x42\x87\xb9\x38\xcd\xce\x8b\x83\xd6\xc3\xaa\x6d\x04\x73\x99\xe0\xcb\x51\x5a\x63\xaa\xa2\x35\xd2\x61\x4c\x1e\xe5\x6c\xf7\xd5\xa1\x4a\x4c\x36\xb0\x42\xc4\xbb\x0c\x58\xa3\x38\x0f\x70\xa1\x7b\x31\x54\xc8\x67\x9a\xaa\x0b\x24\xe3\xbc\x2c\x2e\xd4\x95\x50\x5b\xfb\x8c\x5f\x0a\x73\xd8\x9d\x5c\x89\xe3\xb1\x78\xb8\xe9\xdd\x48\xa8\x45\x42\xa0\xe4\x21\x86\x44\x61\x3f\x9d\x08\x2b\x34\xe0\x71\x0a\xe4\x27\xa3\x25\xa3\x9a\xe9\xe4\x2f\x11\xdc\x54\xf7\x7d\x13\x21\x08\xf8\x70\x55\x01\xb8\x8a\xfc\x61\x32\x51\xf5\x0c\x92\xca\x60\xb9\x14\x23\xd2\x0e\x4b\x60\x51\x8c\xf7\x18\xf3\x30\xa2\x45\xf4\x8d\xa6\x2b\x84\x28\xe7\xfa\x70\x0f\xf8\x61\x8d\xf5\x7c\x57\xb7\xe8\x90\xd5\x25\x48\x37\x6a\x70\xfa\x33\x27\x33\xc0\x53\xe9\x02\x62\xaa\xfd\x44\xc5\x83\xed\x5e\xa7\xd5\xef\xc4\xbb\xa0\xc1\xce\x46\x6a\x64\xa3\xf3\xa8\x93\x1c\x69\x0d\x36\xb6\xfa\xf1\x81\x9d\x41\xdf\x6e\x7d\xd0\xfa\x28\x42\x32\x2f\xb3\xa6\x38\x22\xed\x05\xfb\x1b\xda\x2a\x84\x93\x6d\x4d\x2f\xb1\x97\x8c\xdb\xfa\x1a\xf2\xa8\xc9\xce\xbc\x4e\x41\x92\x63\x5d\xfd\xd8\x15\x13\xe5\x38\xaf\xcf\xb5\x55\x92\x07\x4b\x5a\x49\xd2\xa8\x02\xff\x72\x6e\x51\x77\x29\x37\x5d\xe8\x7f\xd4\x17\xd5\x3a\x39\xd6\xa0\xdd\xee\x58\x56\xfc\x14\x74\x7a\xbd\x6e\x2f\x71\x96\xac\x4e\xcf\xde\xee\xf6\xed\xce\x87\x5b\x56\x3f\x33\x93\x19\x7d\xdc\xe9\xb5\x37\x5b\xdb\xfd\x7c\x99\xf9\x6c\x66\xc6\xda\xec\xee\xe4\xcb\x04\x33\xd9\xd1\x87\x83\x82\xe5\x0f\x07\xf9\x83\xad\xc7\xdd\x41\xe4\xd7\x76\x77\xf0\x60\xb3\xf4\xa4\x47\xb1\x29\x8c\x7c\x86\xd8\xb7\xd4\x26\x86\xd7\x9b\xca\x72\x5c\x98\x9b\x41\x0d\xc1\xe8\x5d\x7c\xf5\xfc\xa1\xf7\xec\xda\xc2\xe6\xae\x5a\x0f\x26\x33\x2d\x08\xc9\x1e\xcb\xe5\x5c\xe6\xdc\x23\xc1\xa7\x89\xca\xb2\x0e\x52\x78\xc4\xc4\xa4\x48\x96\x50\x85\x47\x58\x94\x64\xf0\x77\xd6\x0a\x34\x33\x8f\xd5\x73\xc9\x08\x96\x32\xad\xbe\x53\x92\x63\x87\x0c\xc3\x0f\x20\x75\x77\xd8\xf6\x08\x1d\xd7\xda\x28\x85\xd4\x35\x80\xba\xca\x3b\x58\xdc\xdb\xab\xbc\x22\x35\x52\xfa\x17\x1f\xcb\xc2\xb7\x4a\xc1\x87\xa2\xb3\xe7\xbf\x9f\x7d\xfb\x5b\x49\x3a\x2b\x7b\x2b\xf1\x7f\x6a\x62\xae\xe9\x76\x7a\x99\x14\x2e\xc9\x27\xf5\xe4\xf6\x51\xb6\x59\xaa\x96\x14\x6d\xc7\x10\xbc\x38\x49\x2d\xa9\xc5\x2d\x39\x7d\xe5\x08\xb0\x37\xb4\x3d\x32\xbc\xd1\xd2\x77\x6b\xdd\x66\xf9\xfb\xcf\xbb\xdb\x78\x36\xcc\xff\x71\xe3\xbf\x00\x00\x00\xff\xff\xc7\xd9\xee\x6c\xad\x1f\x00\x00")

func proto_micro_mall_sku_proto_sku_business_sku_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
		"proto/micro_mall_sku_proto/sku_business/sku.swagger.json",
	)
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4f\x6f\x23\x35\x14\xbf\xe7\x53\x58\x86\x63\xd5\x94\x82\x38\xf4\x16\xa5\x11\x54\xa2\x5b\x94\xa4\x12\x12\xaa\x46\xee\xcc\x4b\xe2\xd5\x8c\x3d\xb5\xdf\x94\x46\xa8\x87\x95\x00\xed\x09\x0e\x5b\x16\x21\xd0\x8a\xbd\x71\x82\x03\x42\x45\xcb\x61\xbf\x0c\xc9\x96\x6f\x81\x3c\x7f\x92\x99\xc9\x24\x9d\xfc\xeb\x26\xa2\x52\xab\xd4\xf6\x7b\x7e\xbf\x9f\x7f\x7e\xcf\x2f\x5f\x56\x08\xa1\xfa\x0b\xd6\xed\x82\xa2\x07\x84\xee\xef\xee\xd1\x1d\x33\xc6\x45\x47\xd2\x03\x62\xe6\x09\xa1\xc8\xd1\x05\x33\xef\x2b\x89\xb2\xea\x71\x5b\x49\xcb\x63\xae\x6b\x05\x1a\x94\xb6\xa2\xe1\xf0\x73\xf4\x77\x37\x1c\x09\x5d\x11\x42\x2f\x41\x69\x2e\x85\x71\x10\x7f\x24\x42\x22\xd1\x80\xb4\x42\xc8\x75\xb8\xa1\x2d\x85\x0e\x3c\xd0\xf4\x80\x7c\x1e\x59\x31\xdf\x77\xb9\xcd\x90\x4b\x51\x7d\xac\xa5\x30\x6b\xcf\xc2\xb5\xbe\x92\x4e\x60\x97\x5c\xcb\xb0\xa7\xc7\x48\xaa\x97\xef\x85\x11\x56\x33\x00\x09\xa1\x5d\xc0\xd4\xbf\x86\x95\xc0\xf3\x98\xea\x9b\xa0\xef\xbe\xbd\x1d\x7c\xf7\xfc\xcd\xcd\xaf\xc3\xa7\xb7\xff\xbc\x7e\x39\x7c\xf2\x7b\x8c\x2c\x5c\x28\x7d\x50\xe1\xce\x47\x8e\x59\xfc\x11\xe0\xa9\x06\x75\x64\xfc\xa7\x56\x29\xd0\xbe\x14\x1a\x74\x66\x17\x42\xe8\xfe\xde\x5e\x6e\x88\x10\xea\x80\xb6\x15\xf7\x31\x66\xad\x46\x74\x60\xdb\xa0\x75\x27\x70\x49\xe2\x69\x37\xe5\x3e\x8a\xd8\xee\x81\xc7\x26\x9c\x11\x42\xdf\x55\xd0\x31\x7e\xde\xa9\x3a\xd0\xe1\x82\x1b\xbf\xf1\x49\xa5\xc2\x6d\xc6\x8e\x69\xc6\xfc\xba\x52\xf4\xf9\x3a\x05\xcd\x67\x8a\x79\x80\xa0\xc6\x07\x12\xfd\xe4\x40\x09\xe6\x85\x22\x0a\xb8\x93\x0f\x9d\x87\x30\x2f\x02\x50\xfd\xfc\x94\x82\x8b\x80\x2b\x30\xdc\x76\x98\xab\x21\x37\x8d\x7d\x3f\x74\xaa\x51\x71\xd1\xcd\x1b\x77\xa4\xf2\x98\x39\x58\xca\x05\x7e\xf8\x01\x2d\xc4\x72\x96\xc2\x82\xac\x9b\x47\x41\x0d\x3f\xba\x05\xea\x92\xdb\x29\x6e\xce\x2a\x69\x3f\x31\x1f\x63\x7d\x79\xa0\xec\x1e\x13\xa8\xab\x4c\x6b\x69\x73\x86\x50\xd5\x3d\xe9\xa7\x35\xe7\x07\xd3\x35\x37\xf8\xfe\x9b\xe1\xd3\xdb\xc1\xd7\x7f\xdc\x3d\xb9\x19\xbc\xfa\xe1\xdf\x67\xaf\x66\x68\xee\x38\xd9\xac\x96\xec\xd5\x32\x5b\x6d\x81\xfc\x8a\x23\x7f\x28\x25\x9e\x4b\x67\x42\x6f\x91\x14\x8b\x66\x52\x4a\x44\x15\xe4\x85\xb8\x52\xf8\x17\x01\x68\x2c\x83\xfe\x3e\xed\x8e\x36\x58\x42\xbf\x81\xc3\xb1\xb4\x6c\x7f\x7b\x39\xfc\xe5\xaf\x48\xbc\x3b\x77\xaf\x6f\x06\x3f\xbd\x88\x86\xde\xfc\xfd\x6c\xf8\xe2\xe7\x32\x1a\x3e\x66\x08\x8a\x33\xb7\x16\xee\xbb\x4d\x1a\xce\x44\xfe\xff\xd3\x70\x0e\xfe\x26\x69\xd8\x8b\x43\x9b\xaf\xe2\x47\x32\xbe\xfb\xf3\xab\xe1\xf3\x1f\x67\x57\xfc\x09\x0e\xb6\x41\xb7\x45\x71\x3f\x94\x6a\x93\x03\xb1\xb6\xec\x2d\x50\x42\x8b\x3b\xa3\x3c\x29\xf5\x8a\xde\x94\x5b\x29\xaf\xb7\xa6\xad\xcd\xcb\x88\x6f\x23\x19\x8e\x3a\xab\x54\x78\xe3\x3e\x28\x8c\xb3\x2e\x3d\x4f\x8a\xd1\xb1\xa4\x72\x63\x72\x93\xe4\xf9\x63\xb0\xc7\x45\xd8\x74\x5e\x3e\x28\xe4\x39\xb1\x51\x5b\x3a\x90\x97\xdf\x0c\x82\x9a\x80\x75\x63\x51\x78\xdc\x9e\xee\xe6\x5d\xe5\x2e\x76\x25\x4f\x5b\x36\xff\xdf\x9f\xdc\x96\x42\x6a\x38\x9b\x03\x6b\x8e\xe4\x42\xc8\xb9\x66\x74\x6e\x7d\x85\xcd\x66\x49\x56\x26\xba\xbd\x2d\x27\x63\xd4\x6c\x97\xc1\x3f\xfb\xbd\xbd\x04\x13\xe9\x7a\x36\x5b\xbc\xe9\x04\x33\xbd\x26\xa5\x09\x31\x6d\xe3\x3a\xfc\x72\x6d\x8d\x7a\xd3\x69\xce\xcf\xa5\x74\x81\x89\x69\xde\x93\xe9\x65\xb8\xdf\x24\x19\x96\x88\xbe\xf0\x95\xbb\xa1\xca\x09\x5b\x37\x2b\x58\x83\x67\x43\x39\x08\x5c\x41\xa2\xbe\xa7\x7b\xda\x08\x59\xa4\x2f\x23\xce\xb8\x2d\x5c\x20\x74\x41\xcd\xe0\xf3\xfd\xfd\xd5\xf0\x99\x32\x15\x70\x85\xd6\xfa\x4e\x9a\x6b\x4b\x5e\x86\xdf\x0e\x3f\x58\x82\xc8\x94\xb5\x25\x04\xb0\x0e\x3a\xd6\x79\x5d\x15\x74\xb9\x46\x50\x16\x73\x9c\xa9\x84\xcf\x92\x42\x0f\x98\x8b\x3d\xcb\x66\xca\xb1\xc4\x44\x11\x2d\xe3\x81\x3b\x20\x90\x63\x7f\xf5\x0a\x5f\xd3\xc5\x41\x76\x35\x37\xde\x39\x24\xb8\x82\x04\xbf\xe2\xc7\x5d\x51\x97\x68\xc5\x31\x95\xdd\xe3\x24\x31\x6c\x1b\xbb\x05\x89\xd9\xd0\x04\xbd\xf2\x0b\x3a\x9d\x94\x2c\x8d\x05\x44\xe4\x36\xa2\x20\x02\x2f\xd3\xd0\xd1\x7a\xb3\x51\x6b\x37\xd2\xed\xfc\xe9\xa7\x87\xb9\x91\xc3\xc6\x27\x8d\xec\x48\xed\xf4\xf0\xa8\x9d\x84\x38\xea\x18\x4d\xa7\xc7\x02\x37\x04\x11\xfb\x9d\x8c\x39\x69\xbd\x16\x8a\xb6\x75\x5a\xaf\x37\x5a\xad\x74\x28\x8d\x66\xf3\xa4\x99\x89\xbf\xd5\x68\x5a\x8f\x4e\xda\x56\xe3\xb3\xa3\x56\x7b\x62\x66\x62\xf4\xb8\xd1\xac\x7f\x5c\x7b\xd4\x2e\xb6\x19\xcd\x46\x33\xb3\x20\x27\xc1\x4d\x62\x1e\xb5\x08\x1b\x56\x4b\x98\x6d\xcb\x40\xe0\xfd\x4a\x2d\xb4\x36\xd0\xac\xf8\x3b\x8f\xb9\x8d\x35\x5c\xad\xe3\x11\x13\x08\x54\x7d\xab\xe8\xdb\x80\x32\x41\xf9\x3d\x29\x16\x32\x04\x8f\x71\x77\x21\x1a\xd6\x53\x94\xb8\xb3\x54\x0d\x16\x97\x1c\xa7\xbf\xb8\x16\x7f\xc9\x45\x7e\x17\x3e\x1e\x5b\x0a\x64\x36\x2e\xfc\x3a\x61\xdd\x75\x3c\x9c\x15\x30\x04\x0b\xf9\x62\xf7\x20\xf0\x9d\xb9\xcd\xb3\x05\xa1\x62\x7e\xaf\x2b\xff\x05\x00\x00\xff\xff\x60\x10\x61\xa2\x4a\x21\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_sku_proto/sku_business/sku.swagger.json": proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_sku_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"sku_business": &_bintree_t{nil, map[string]*_bintree_t{
				"sku.swagger.json": &_bintree_t{proto_micro_mall_sku_proto_sku_business_sku_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}

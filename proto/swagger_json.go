package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_sku_proto_sku_business_sku_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x08\xb6\xc7\x45\x9c\xa6\x45\x0f\xb9\xb9\x8e\xd0\x35\x76\xbb\x09\x2c\x1b\x6d\x51\x04\x02\x23\x8f\x1d\xae\x25\x92\xe1\x4f\x02\xa3\xf0\xa1\x97\x1e\x0a\xf4\xb4\x58\xa0\xa7\xbe\x41\x8b\x9e\x8a\xa2\xcf\xd3\xe4\x39\x0a\xca\x92\x45\x51\x52\x62\xcb\x69\x81\xcd\x49\x9e\xe1\x7c\x9a\x6f\xf8\xcd\x50\xcc\xf7\x3d\x84\xb0\xba\x23\x8b\x05\x48\x7c\x8a\xf0\xc9\xd1\x31\x7e\x61\x6d\x94\xcd\x39\x3e\x45\xd6\x8f\x10\xd6\x54\x27\x60\xfd\x42\x72\xcd\xfb\x29\x8d\x25\x8f\x52\x92\x24\x91\x5a\x9a\x68\x63\xb4\x4f\x57\x46\x51\x06\x4a\xd9\x1f\x47\x99\x39\x43\x43\x08\xdf\x82\x54\x94\x33\x8b\x91\x3f\x22\xc6\x35\x52\xa0\x71\x0f\xa1\x75\xf6\xce\x98\x33\x65\x52\x50\xf8\x14\x7d\xb7\x89\x22\x42\x24\x34\x26\x9a\x72\xd6\x7f\xab\x38\xb3\x6b\x2f\xb3\xb5\x42\xf2\x99\x89\x77\x5c\x4b\xf4\xb5\x2a\xc9\xf4\x6f\x3f\xb1\xf9\xf5\x13\xaa\xf4\xd6\x8a\x10\x5e\x80\xfb\x13\x21\xcc\x05\xc8\x0c\x6f\x34\xb3\x79\x7f\x09\x3a\x5c\x9a\xd7\x36\xea\x45\xb9\x48\x82\x12\x9c\x29\x50\x95\x58\x84\xf0\xc9\xf1\xb1\x67\x42\x08\xcf\x40\xc5\x92\x0a\x9d\x97\x62\x80\x94\x89\x63\x50\x6a\x6e\x12\x54\x20\x1d\x39\xf0\x59\x90\x8a\xaf\x21\x25\x35\x30\x84\xf0\xc7\x12\xe6\x16\xe7\xa3\xfe\x0c\xe6\x94\x51\x8b\xab\x2a\x3b\x51\x26\x3d\xce\xe1\x71\x05\x64\xdd\x6b\x7a\x5e\x3b\x04\x05\x91\x24\x05\x0d\xb2\xac\xf5\xe6\xcf\xa3\xc6\x48\x9a\x49\x44\x5d\x73\x11\xd1\x99\x4f\x82\x66\x84\x6f\x0c\xc8\x95\xef\x92\x70\x63\xa8\x04\x5b\xe4\x39\x49\x14\x78\x6e\xbd\x12\x1b\x60\x2d\x29\x5b\xf8\xc1\x73\x2e\x53\x62\x37\x0e\x53\xa6\x3f\xff\x0c\x37\xf2\xb9\x74\xf8\x68\xb2\xf0\x99\xe0\x70\x69\xbe\xc8\x0b\x16\x82\xbc\xa5\xb1\x53\xa5\xcb\x9e\x8b\x96\x57\x66\x2b\x22\x61\x74\x44\xee\xc8\xca\x15\x92\xe0\xca\x53\x92\x32\x69\x4a\xa4\x5d\x84\xff\xf9\xeb\xa7\x87\x5f\xff\xbc\x7f\xff\xe3\xfd\xbb\x1f\x5c\x1d\x79\x62\xbb\x30\x7a\x70\x47\x56\xe1\xd2\x7c\x40\x62\x2b\x93\xfe\xbf\xc4\x76\xc5\x67\x35\x39\x6d\x94\xd6\xe4\x71\x84\xa6\xa5\xf1\x75\xf6\x5c\xcc\x6f\x0c\x28\xbd\x0b\xf1\x67\x54\xe5\x76\x86\x3a\x09\x96\x13\xcf\xcd\x74\xc8\xd3\x94\xb3\xed\xfe\x38\xb2\x2d\xfa\x8c\x5f\xbd\x85\xb8\x9c\x71\x76\xd4\x0a\x90\x9a\x7a\xaa\xc3\x31\x9f\x81\xaf\xc3\xa7\x2b\x35\x06\x3d\xb4\x81\x8d\xdb\x9f\xaa\x85\x8f\xe8\x75\x7f\xcf\x2f\x63\xb5\x2d\x9f\x18\x7d\x07\xb0\xf5\x4e\x8b\x0a\x06\x91\x92\x54\xc5\x86\xa9\x86\xd4\xef\xd2\x9d\xea\x13\x2e\xcd\x88\xdd\x02\xd3\x5c\xae\x46\xf6\x10\x6e\xee\x99\x27\xd9\x9f\x17\xf3\x64\xb2\x49\xb2\x46\xdc\x1b\xa7\x18\x98\x49\x2b\x0a\xc4\xc3\x71\x30\x98\x04\xee\xfc\x99\x5e\x9c\x79\x96\xb3\xe0\x75\x50\xb5\x0c\xa6\x67\xa3\x89\x6b\xb8\x98\x4e\xa2\xc1\xd7\x83\x6f\x0b\x26\x5b\xd9\x5b\xb1\x12\x93\x64\xc3\x3b\x7f\x57\x2b\x9d\x7a\x83\x1d\xb0\x97\x5c\x44\x86\xce\x9e\x50\x5a\x65\x3b\x5b\x4f\x99\x75\x65\x84\x47\x54\xec\xac\x5f\x27\x50\x2d\xcd\xfe\x8d\xd4\x2e\x94\x75\xd3\xb1\x12\xe9\xaa\x0e\x76\x7c\x4b\x55\x46\x7b\xe8\xaf\xe1\x2c\x38\x68\xd6\xd8\xa9\xb5\x7f\xfa\xde\xb4\xdb\x23\xff\x62\x4e\x75\xea\x9c\x70\x3a\x1c\x06\x61\xe8\x76\x41\x30\x1e\x9f\x8f\x2b\xbd\x14\x06\xe3\xe8\xcd\xf9\x24\x0a\xbe\x19\x85\x93\x9a\xa7\x66\xfd\x2a\x18\x0f\x5f\x0e\xde\x4c\x9a\x63\xb6\xde\x9a\x27\x7c\x79\x7e\xd1\x1c\x93\x79\xea\xd6\x57\xd3\x96\xe5\xaf\xa6\xb9\xf1\xb1\x46\x2e\xa8\xb7\x16\xb6\xa6\xdb\x03\x64\x61\x71\x9b\x8e\xa1\x5d\x9a\x2e\xff\x84\xd8\x3b\x4e\x48\x7b\x10\x77\x08\x2c\x2e\x51\xfb\x8f\x07\x73\x15\x75\x0e\xb6\x1f\x81\xdd\x68\xda\x0b\x56\xfe\xed\xd8\x21\x65\x7b\x1b\xcb\xee\x94\x7b\xc7\xc6\x44\xc3\x82\xcb\x55\x5b\x2c\x65\x1a\xec\x75\xb5\x7d\x40\x7f\x7a\xd2\x82\xcc\x13\xde\x2d\x25\x1b\xf8\xa8\xd2\xba\x27\xa5\x04\xc4\x74\x9e\xdf\x5c\xbb\xee\x70\x94\x50\xb6\xec\xb4\x51\x9a\xe8\xff\x80\x14\x49\xb9\x61\xad\xdf\x4b\x9d\x4f\xd8\xe2\x6e\xf9\x2c\xb8\x3d\x0f\xbf\xfc\x2f\xc7\xe6\x76\x76\xff\xf7\xbb\xfb\xdf\x7e\x79\x78\xff\xc7\xc3\xcf\xbf\xe7\xe3\xcc\x7e\x66\xf7\xd6\xbd\x7f\x03\x00\x00\xff\xff\x16\x7c\x6f\xab\x36\x11\x00\x00")

func proto_micro_mall_sku_proto_sku_business_sku_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
		"proto/micro_mall_sku_proto/sku_business/sku.swagger.json",
	)
}

var _proto_micro_mall_users_proto_users_users_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4f\x6f\x23\x35\x14\xbf\xe7\x53\x58\x86\x63\xd5\x94\x82\x38\xf4\x16\xa5\x11\x54\xa2\x5b\x94\xa4\x12\x12\xaa\x46\xee\xcc\x4b\xe2\xd5\x8c\x3d\xb5\xdf\x94\x46\xa8\x87\x95\x00\xed\x09\x0e\x5b\x16\x21\xd0\x8a\xbd\x71\x82\x03\x42\x45\xcb\x61\xbf\x0c\xc9\x96\x6f\x81\x3c\x7f\x92\x99\xc9\x24\x9d\xfc\xeb\x26\xa2\x52\xab\xd4\xf6\x7b\x7e\xbf\x9f\x7f\x7e\xcf\x2f\x5f\x56\x08\xa1\xfa\x0b\xd6\xed\x82\xa2\x07\x84\xee\xef\xee\xd1\x1d\x33\xc6\x45\x47\xd2\x03\x62\xe6\x09\xa1\xc8\xd1\x05\x33\xef\x2b\x89\xb2\xea\x71\x5b\x49\xcb\x63\xae\x6b\x05\x1a\x94\xb6\xa2\xe1\xf0\x73\xf4\x77\x37\x1c\x09\x5d\x11\x42\x2f\x41\x69\x2e\x85\x71\x10\x7f\x24\x42\x22\xd1\x80\xb4\x42\xc8\x75\xb8\xa1\x2d\x85\x0e\x3c\xd0\xf4\x80\x7c\x1e\x59\x31\xdf\x77\xb9\xcd\x90\x4b\x51\x7d\xac\xa5\x30\x6b\xcf\xc2\xb5\xbe\x92\x4e\x60\x97\x5c\xcb\xb0\xa7\xc7\x48\xaa\x97\xef\x85\x11\x56\x33\x00\x09\xa1\x5d\xc0\xd4\xbf\x86\x95\xc0\xf3\x98\xea\x9b\xa0\xef\xbe\xbd\x1d\x7c\xf7\xfc\xcd\xcd\xaf\xc3\xa7\xb7\xff\xbc\x7e\x39\x7c\xf2\x7b\x8c\x2c\x5c\x28\x7d\x50\xe1\xce\x47\x8e\x59\xfc\x11\xe0\xa9\x06\x75\x64\xfc\xa7\x56\x29\xd0\xbe\x14\x1a\x74\x66\x17\x42\xe8\xfe\xde\x5e\x6e\x88\x10\xea\x80\xb6\x15\xf7\x31\x66\xad\x46\x74\x60\xdb\xa0\x75\x27\x70\x49\xe2\x69\x37\xe5\x3e\x8a\xd8\xee\x81\xc7\x26\x9c\x11\x42\xdf\x55\xd0\x31\x7e\xde\xa9\x3a\xd0\xe1\x82\x1b\xbf\xf1\x49\xa5\xc2\x6d\xc6\x8e\x69\xc6\xfc\xba\x52\xf4\xf9\x3a\x05\xcd\x67\x8a\x79\x80\xa0\xc6\x07\x12\xfd\xe4\x40\x09\xe6\x85\x22\x0a\xb8\x93\x0f\x9d\x87\x30\x2f\x02\x50\xfd\xfc\x94\x82\x8b\x80\x2b\x30\xdc\x76\x98\xab\x21\x37\x8d\x7d\x3f\x74\xaa\x51\x71\xd1\xcd\x1b\x77\xa4\xf2\x98\x39\x58\xca\x05\x7e\xf8\x01\x2d\xc4\x72\x96\xc2\x82\xac\x9b\x47\x41\x0d\x3f\xba\x05\xea\x92\xdb\x29\x6e\xce\x2a\x69\x3f\x31\x1f\x63\x7d\x79\xa0\xec\x1e\x13\xa8\xab\x4c\x6b\x69\x73\x86\x50\xd5\x3d\xe9\xa7\x35\xe7\x07\xd3\x35\x37\xf8\xfe\x9b\xe1\xd3\xdb\xc1\xd7\x7f\xdc\x3d\xb9\x19\xbc\xfa\xe1\xdf\x67\xaf\x66\x68\xee\x38\xd9\xac\x96\xec\xd5\x32\x5b\x6d\x81\xfc\x8a\x23\x7f\x28\x25\x9e\x4b\x67\x42\x6f\x91\x14\x8b\x66\x52\x4a\x44\x15\xe4\x85\xb8\x52\xf8\x17\x01\x68\x2c\x83\xfe\x3e\xed\x8e\x36\x58\x42\xbf\x81\xc3\xb1\xb4\x6c\x7f\x7b\x39\xfc\xe5\xaf\x48\xbc\x3b\x77\xaf\x6f\x06\x3f\xbd\x88\x86\xde\xfc\xfd\x6c\xf8\xe2\xe7\x32\x1a\x3e\x66\x08\x8a\x33\xb7\x16\xee\xbb\x4d\x1a\xce\x44\xfe\xff\xd3\x70\x0e\xfe\x26\x69\xd8\x8b\x43\x9b\xaf\xe2\x47\x32\xbe\xfb\xf3\xab\xe1\xf3\x1f\x67\x57\xfc\x09\x0e\xb6\x41\xb7\x45\x71\x3f\x94\x6a\x93\x03\xb1\xb6\xec\x2d\x50\x42\x8b\x3b\xa3\x3c\x29\xf5\x8a\xde\x94\x5b\x29\xaf\xb7\xa6\xad\xcd\xcb\x88\x6f\x23\x19\x8e\x3a\xab\x54\x78\xe3\x3e\x28\x8c\xb3\x2e\x3d\x4f\x8a\xd1\xb1\xa4\x72\x63\x72\x93\xe4\xf9\x63\xb0\xc7\x45\xd8\x74\x5e\x3e\x28\xe4\x39\xb1\x51\x5b\x3a\x90\x97\xdf\x0c\x82\x9a\x80\x75\x63\x51\x78\xdc\x9e\xee\xe6\x5d\xe5\x2e\x76\x25\x4f\x5b\x36\xff\xdf\x9f\xdc\x96\x42\x6a\x38\x9b\x03\x6b\x8e\xe4\x42\xc8\xb9\x66\x74\x6e\x7d\x85\xcd\x66\x49\x56\x26\xba\xbd\x2d\x27\x63\xd4\x6c\x97\xc1\x3f\xfb\xbd\xbd\x04\x13\xe9\x7a\x36\x5b\xbc\xe9\x04\x33\xbd\x26\xa5\x09\x31\x6d\xe3\x3a\xfc\x72\x6d\x8d\x7a\xd3\x69\xce\xcf\xa5\x74\x81\x89\x69\xde\x93\xe9\x65\xb8\xdf\x24\x19\x96\x88\xbe\xf0\x95\xbb\xa1\xca\x09\x5b\x37\x2b\x58\x83\x67\x43\x39\x08\x5c\x41\xa2\xbe\xa7\x7b\xda\x08\x59\xa4\x2f\x23\xce\xb8\x2d\x5c\x20\x74\x41\xcd\xe0\xf3\xfd\xfd\xd5\xf0\x99\x32\x15\x70\x85\xd6\xfa\x4e\x9a\x6b\x4b\x5e\x86\xdf\x0e\x3f\x58\x82\xc8\x94\xb5\x25\x04\xb0\x0e\x3a\xd6\x79\x5d\x15\x74\xb9\x46\x50\x16\x73\x9c\xa9\x84\xcf\x92\x42\x0f\x98\x8b\x3d\xcb\x66\xca\xb1\xc4\x44\x11\x2d\xe3\x81\x3b\x20\x90\x63\x7f\xf5\x0a\x5f\xd3\xc5\x41\x76\x35\x37\xde\x39\x24\xb8\x82\x04\xbf\xe2\xc7\x5d\x51\x97\x68\xc5\x31\x95\xdd\xe3\x24\x31\x6c\x1b\xbb\x05\x89\xd9\xd0\x04\xbd\xf2\x0b\x3a\x9d\x94\x2c\x8d\x05\x44\xe4\x36\xa2\x20\x02\x2f\xd3\xd0\xd1\x7a\xb3\x51\x6b\x37\xd2\xed\xfc\xe9\xa7\x87\xb9\x91\xc3\xc6\x27\x8d\xec\x48\xed\xf4\xf0\xa8\x9d\x84\x38\xea\x18\x4d\xa7\xc7\x02\x37\x04\x11\xfb\x9d\x8c\x39\x69\xbd\x16\x8a\xb6\x75\x5a\xaf\x37\x5a\xad\x74\x28\x8d\x66\xf3\xa4\x99\x89\xbf\xd5\x68\x5a\x8f\x4e\xda\x56\xe3\xb3\xa3\x56\x7b\x62\x66\x62\xf4\xb8\xd1\xac\x7f\x5c\x7b\xd4\x2e\xb6\x19\xcd\x46\x33\xb3\x20\x27\xc1\x4d\x62\x1e\xb5\x08\x1b\x56\x4b\x98\x6d\xcb\x40\xe0\xfd\x4a\x2d\xb4\x36\xd0\xac\xf8\x3b\x8f\xb9\x8d\x35\x5c\xad\xe3\x11\x13\x08\x54\x7d\xab\xe8\xdb\x80\x32\x41\xf9\x3d\x29\x16\x32\x04\x8f\x71\x77\x21\x1a\xd6\x53\x94\xb8\xb3\x54\x0d\x16\x97\x1c\xa7\xbf\xb8\x16\x7f\xc9\x45\x7e\x17\x3e\x1e\x5b\x0a\x64\x36\x2e\xfc\x3a\x61\xdd\x75\x3c\x9c\x15\x30\x04\x0b\xf9\x62\xf7\x20\xf0\x9d\xb9\xcd\xb3\x05\xa1\x62\x7e\xaf\x2b\xff\x05\x00\x00\xff\xff\x60\x10\x61\xa2\x4a\x21\x00\x00")

func proto_micro_mall_users_proto_users_users_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_users_proto_users_users_swagger_json,
		"proto/micro_mall_users_proto/users/users.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_sku_proto/sku_business/sku.swagger.json": proto_micro_mall_sku_proto_sku_business_sku_swagger_json,
	"proto/micro_mall_users_proto/users/users.swagger.json": proto_micro_mall_users_proto_users_users_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_sku_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"sku_business": &_bintree_t{nil, map[string]*_bintree_t{
				"sku.swagger.json": &_bintree_t{proto_micro_mall_sku_proto_sku_business_sku_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
		"micro_mall_users_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"users": &_bintree_t{nil, map[string]*_bintree_t{
				"users.swagger.json": &_bintree_t{proto_micro_mall_users_proto_users_users_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
